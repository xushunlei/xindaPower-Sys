<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
     http://www.springframework.org/schema/context 
     http://www.springframework.org/schema/context/spring-context-3.2.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
     http://www.springframework.org/schema/tx
     http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
     http://www.springframework.org/schema/task
     http://www.springframework.org/schema/task/spring-task-3.2.xsd">
	<context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
	<bean id="datasource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driver}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="initialSize" value="${dbcp.initialSize}"></property>
		<property name="maxActive" value="${dbcp.maxActive}"></property>
		<property name="maxIdle" value="${dbcp.maxIdle}"></property>
		<property name="maxWait" value="${dbcp.maxWait}"></property>
	</bean>
	<!-- spring-mybatis 实现工厂bean -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="datasource"></property>
	</bean>
	<!-- 配置mapper xml文件的基包 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.xinda.dao"></property>
	</bean>
	<bean id="captchca" class="com.xinda.util.DefaultImageCaptchca"></bean>
	<context:component-scan base-package="com.xinda.service">
        <!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/> -->
    </context:component-scan>
	<!-- 事务管理类 -->
	<bean id="txm"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="datasource"></property>
	</bean>
	<tx:advice id="txservice" transaction-manager="txm">
	<!-- tx:attribute标签所配置的是作为事务的方法的命名类型 -->
		<tx:attributes>
			<!-- propagation="REQUIRED"代表支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择 -->
			<tx:method name="tx_*" propagation="REQUIRED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- aop:pointcut标签配置参与事务的类，由于是在Service中进行数据库业务操作，配的应该是包含那些作为事务的方法的Service类。 -->
		<!-- 其中第一个*代表返回值，第二*代表service下子包，第三个*代表方法名，“（..）”代表方法参数。 -->
		<aop:pointcut expression="execution(* com.xinda.service..*.*(..))"
			id="ptservice" />
		<!-- aop:advisor标签就是把上面我们所配置的事务管理两部分属性整合起来作为整个事务管理 -->
		<aop:advisor advice-ref="txservice" pointcut-ref="ptservice" />
	</aop:config>
	<!-- <tx:annotation-driven transaction-manager="txm"/> -->
	<!-- <aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
	
	<!-- 配置任务线性池   
    <task:executor  id="executor" pool-size="10" />   
    <task:scheduler id="scheduler" pool-size="10"/>
	<task:annotation-driven scheduler="scheduler" executor="executor" proxy-target-class="true"/>
	-->
	<!-- 任务扫描注解 -->
	<task:annotation-driven/>
	<context:component-scan base-package="com.xinda.task"/>
</beans>